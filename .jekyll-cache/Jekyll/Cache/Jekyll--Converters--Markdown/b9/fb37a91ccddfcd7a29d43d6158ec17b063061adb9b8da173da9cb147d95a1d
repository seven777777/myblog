I"V<h2 id="1-检测项目重复代码">1. 检测项目重复代码</h2>
<h3 id="11-检测方案jscpd">1.1 检测方案：jscpd</h3>
<h4 id="方法一">方法一：</h4>
<ul>
  <li>全局安装jscpd依赖<code class="language-plaintext highlighter-rouge">npm i -g jscpd</code></li>
  <li>项目根路径执行：<code class="language-plaintext highlighter-rouge">jscpd -p "src/**/*.js" -k 15 -l 5</code>
<img src="https://seven777777.github.io/myblog/images/post/2023-01-28-engineering-repeat-check/pic01.png" /></li>
</ul>

<h4 id="方法二node-api">方法二：Node Api</h4>
<p>项目中安装jscpd依赖
<img src="https://seven777777.github.io/myblog/images/post/2023-01-28-engineering-repeat-check/pic02.png" /></p>

<h4 id="可视化报告">可视化报告</h4>
<p>安装：@jscpd/html-reporter
<img src="https://seven777777.github.io/myblog/images/post/2023-01-28-engineering-repeat-check/pic03.png" /></p>

<h3 id="12-危害性">1.2 危害性</h3>
<ol>
  <li>可读性差</li>
  <li>难维护</li>
</ol>

<h3 id="13-解决方案">1.3 解决方案</h3>
<ol>
  <li>封装组件</li>
  <li>提炼函数</li>
  <li>方法提升（创建类）</li>
</ol>

<h2 id="2-圈复杂度检测">2. 圈复杂度检测</h2>
<p>衡量代码质量的指标</p>

<p>定义：代码开始执行到结束的可走路径
<img src="https://seven777777.github.io/myblog/images/post/2023-01-28-engineering-repeat-check/pic04.png" /></p>

<h3 id="21-如何检测">2.1 如何检测</h3>
<p><img src="https://seven777777.github.io/myblog/images/post/2023-01-28-engineering-repeat-check/pic05.png" />
ESLint——complexity
<img src="https://seven777777.github.io/myblog/images/post/2023-01-28-engineering-repeat-check/pic06.png" /></p>

<h3 id="22-主要思想">2.2 主要思想</h3>
<p>将复杂的逻辑进行分离，能抽象的逻辑尽量抽象到一个纯函数中，在主流程中进行调用</p>

<h2 id="3-代码覆盖率">3. 代码覆盖率</h2>
<h3 id="如何分析">如何分析？</h3>
<ul>
  <li>
    <p>Istanbul 工具
单元测试：Jest+Chai自动统计代码覆盖率</p>
  </li>
  <li>
    <p>assets-retry
容灾方案</p>
  </li>
</ul>
:ET